// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/cluster-api/api/v1beta1"

	"github.com/giantswarm/aws-network-topology-operator/controllers"
)

type FakeClusterClient struct {
	AddFinalizerStub        func(context.Context, *v1beta1.Cluster, string) error
	addFinalizerMutex       sync.RWMutex
	addFinalizerArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
		arg3 string
	}
	addFinalizerReturns struct {
		result1 error
	}
	addFinalizerReturnsOnCall map[int]struct {
		result1 error
	}
	GetStub        func(context.Context, types.NamespacedName) (*v1beta1.Cluster, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 types.NamespacedName
	}
	getReturns struct {
		result1 *v1beta1.Cluster
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *v1beta1.Cluster
		result2 error
	}
	HasStatusConditionStub        func(context.Context, *v1beta1.Cluster) bool
	hasStatusConditionMutex       sync.RWMutex
	hasStatusConditionArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
	}
	hasStatusConditionReturns struct {
		result1 bool
	}
	hasStatusConditionReturnsOnCall map[int]struct {
		result1 bool
	}
	RemoveFinalizerStub        func(context.Context, *v1beta1.Cluster, string) error
	removeFinalizerMutex       sync.RWMutex
	removeFinalizerArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
		arg3 string
	}
	removeFinalizerReturns struct {
		result1 error
	}
	removeFinalizerReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStatusConditionStub        func(context.Context, *v1beta1.Cluster, v1.ConditionStatus) error
	updateStatusConditionMutex       sync.RWMutex
	updateStatusConditionArgsForCall []struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
		arg3 v1.ConditionStatus
	}
	updateStatusConditionReturns struct {
		result1 error
	}
	updateStatusConditionReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClusterClient) AddFinalizer(arg1 context.Context, arg2 *v1beta1.Cluster, arg3 string) error {
	fake.addFinalizerMutex.Lock()
	ret, specificReturn := fake.addFinalizerReturnsOnCall[len(fake.addFinalizerArgsForCall)]
	fake.addFinalizerArgsForCall = append(fake.addFinalizerArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AddFinalizerStub
	fakeReturns := fake.addFinalizerReturns
	fake.recordInvocation("AddFinalizer", []interface{}{arg1, arg2, arg3})
	fake.addFinalizerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClusterClient) AddFinalizerCallCount() int {
	fake.addFinalizerMutex.RLock()
	defer fake.addFinalizerMutex.RUnlock()
	return len(fake.addFinalizerArgsForCall)
}

func (fake *FakeClusterClient) AddFinalizerCalls(stub func(context.Context, *v1beta1.Cluster, string) error) {
	fake.addFinalizerMutex.Lock()
	defer fake.addFinalizerMutex.Unlock()
	fake.AddFinalizerStub = stub
}

func (fake *FakeClusterClient) AddFinalizerArgsForCall(i int) (context.Context, *v1beta1.Cluster, string) {
	fake.addFinalizerMutex.RLock()
	defer fake.addFinalizerMutex.RUnlock()
	argsForCall := fake.addFinalizerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClusterClient) AddFinalizerReturns(result1 error) {
	fake.addFinalizerMutex.Lock()
	defer fake.addFinalizerMutex.Unlock()
	fake.AddFinalizerStub = nil
	fake.addFinalizerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterClient) AddFinalizerReturnsOnCall(i int, result1 error) {
	fake.addFinalizerMutex.Lock()
	defer fake.addFinalizerMutex.Unlock()
	fake.AddFinalizerStub = nil
	if fake.addFinalizerReturnsOnCall == nil {
		fake.addFinalizerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addFinalizerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterClient) Get(arg1 context.Context, arg2 types.NamespacedName) (*v1beta1.Cluster, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 types.NamespacedName
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClusterClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeClusterClient) GetCalls(stub func(context.Context, types.NamespacedName) (*v1beta1.Cluster, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeClusterClient) GetArgsForCall(i int) (context.Context, types.NamespacedName) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClusterClient) GetReturns(result1 *v1beta1.Cluster, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *v1beta1.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterClient) GetReturnsOnCall(i int, result1 *v1beta1.Cluster, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.Cluster
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *v1beta1.Cluster
		result2 error
	}{result1, result2}
}

func (fake *FakeClusterClient) HasStatusCondition(arg1 context.Context, arg2 *v1beta1.Cluster) bool {
	fake.hasStatusConditionMutex.Lock()
	ret, specificReturn := fake.hasStatusConditionReturnsOnCall[len(fake.hasStatusConditionArgsForCall)]
	fake.hasStatusConditionArgsForCall = append(fake.hasStatusConditionArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
	}{arg1, arg2})
	stub := fake.HasStatusConditionStub
	fakeReturns := fake.hasStatusConditionReturns
	fake.recordInvocation("HasStatusCondition", []interface{}{arg1, arg2})
	fake.hasStatusConditionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClusterClient) HasStatusConditionCallCount() int {
	fake.hasStatusConditionMutex.RLock()
	defer fake.hasStatusConditionMutex.RUnlock()
	return len(fake.hasStatusConditionArgsForCall)
}

func (fake *FakeClusterClient) HasStatusConditionCalls(stub func(context.Context, *v1beta1.Cluster) bool) {
	fake.hasStatusConditionMutex.Lock()
	defer fake.hasStatusConditionMutex.Unlock()
	fake.HasStatusConditionStub = stub
}

func (fake *FakeClusterClient) HasStatusConditionArgsForCall(i int) (context.Context, *v1beta1.Cluster) {
	fake.hasStatusConditionMutex.RLock()
	defer fake.hasStatusConditionMutex.RUnlock()
	argsForCall := fake.hasStatusConditionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClusterClient) HasStatusConditionReturns(result1 bool) {
	fake.hasStatusConditionMutex.Lock()
	defer fake.hasStatusConditionMutex.Unlock()
	fake.HasStatusConditionStub = nil
	fake.hasStatusConditionReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeClusterClient) HasStatusConditionReturnsOnCall(i int, result1 bool) {
	fake.hasStatusConditionMutex.Lock()
	defer fake.hasStatusConditionMutex.Unlock()
	fake.HasStatusConditionStub = nil
	if fake.hasStatusConditionReturnsOnCall == nil {
		fake.hasStatusConditionReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.hasStatusConditionReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeClusterClient) RemoveFinalizer(arg1 context.Context, arg2 *v1beta1.Cluster, arg3 string) error {
	fake.removeFinalizerMutex.Lock()
	ret, specificReturn := fake.removeFinalizerReturnsOnCall[len(fake.removeFinalizerArgsForCall)]
	fake.removeFinalizerArgsForCall = append(fake.removeFinalizerArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RemoveFinalizerStub
	fakeReturns := fake.removeFinalizerReturns
	fake.recordInvocation("RemoveFinalizer", []interface{}{arg1, arg2, arg3})
	fake.removeFinalizerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClusterClient) RemoveFinalizerCallCount() int {
	fake.removeFinalizerMutex.RLock()
	defer fake.removeFinalizerMutex.RUnlock()
	return len(fake.removeFinalizerArgsForCall)
}

func (fake *FakeClusterClient) RemoveFinalizerCalls(stub func(context.Context, *v1beta1.Cluster, string) error) {
	fake.removeFinalizerMutex.Lock()
	defer fake.removeFinalizerMutex.Unlock()
	fake.RemoveFinalizerStub = stub
}

func (fake *FakeClusterClient) RemoveFinalizerArgsForCall(i int) (context.Context, *v1beta1.Cluster, string) {
	fake.removeFinalizerMutex.RLock()
	defer fake.removeFinalizerMutex.RUnlock()
	argsForCall := fake.removeFinalizerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClusterClient) RemoveFinalizerReturns(result1 error) {
	fake.removeFinalizerMutex.Lock()
	defer fake.removeFinalizerMutex.Unlock()
	fake.RemoveFinalizerStub = nil
	fake.removeFinalizerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterClient) RemoveFinalizerReturnsOnCall(i int, result1 error) {
	fake.removeFinalizerMutex.Lock()
	defer fake.removeFinalizerMutex.Unlock()
	fake.RemoveFinalizerStub = nil
	if fake.removeFinalizerReturnsOnCall == nil {
		fake.removeFinalizerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeFinalizerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterClient) UpdateStatusCondition(arg1 context.Context, arg2 *v1beta1.Cluster, arg3 v1.ConditionStatus) error {
	fake.updateStatusConditionMutex.Lock()
	ret, specificReturn := fake.updateStatusConditionReturnsOnCall[len(fake.updateStatusConditionArgsForCall)]
	fake.updateStatusConditionArgsForCall = append(fake.updateStatusConditionArgsForCall, struct {
		arg1 context.Context
		arg2 *v1beta1.Cluster
		arg3 v1.ConditionStatus
	}{arg1, arg2, arg3})
	stub := fake.UpdateStatusConditionStub
	fakeReturns := fake.updateStatusConditionReturns
	fake.recordInvocation("UpdateStatusCondition", []interface{}{arg1, arg2, arg3})
	fake.updateStatusConditionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClusterClient) UpdateStatusConditionCallCount() int {
	fake.updateStatusConditionMutex.RLock()
	defer fake.updateStatusConditionMutex.RUnlock()
	return len(fake.updateStatusConditionArgsForCall)
}

func (fake *FakeClusterClient) UpdateStatusConditionCalls(stub func(context.Context, *v1beta1.Cluster, v1.ConditionStatus) error) {
	fake.updateStatusConditionMutex.Lock()
	defer fake.updateStatusConditionMutex.Unlock()
	fake.UpdateStatusConditionStub = stub
}

func (fake *FakeClusterClient) UpdateStatusConditionArgsForCall(i int) (context.Context, *v1beta1.Cluster, v1.ConditionStatus) {
	fake.updateStatusConditionMutex.RLock()
	defer fake.updateStatusConditionMutex.RUnlock()
	argsForCall := fake.updateStatusConditionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClusterClient) UpdateStatusConditionReturns(result1 error) {
	fake.updateStatusConditionMutex.Lock()
	defer fake.updateStatusConditionMutex.Unlock()
	fake.UpdateStatusConditionStub = nil
	fake.updateStatusConditionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterClient) UpdateStatusConditionReturnsOnCall(i int, result1 error) {
	fake.updateStatusConditionMutex.Lock()
	defer fake.updateStatusConditionMutex.Unlock()
	fake.UpdateStatusConditionStub = nil
	if fake.updateStatusConditionReturnsOnCall == nil {
		fake.updateStatusConditionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateStatusConditionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClusterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addFinalizerMutex.RLock()
	defer fake.addFinalizerMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.hasStatusConditionMutex.RLock()
	defer fake.hasStatusConditionMutex.RUnlock()
	fake.removeFinalizerMutex.RLock()
	defer fake.removeFinalizerMutex.RUnlock()
	fake.updateStatusConditionMutex.RLock()
	defer fake.updateStatusConditionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClusterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.ClusterClient = new(FakeClusterClient)
