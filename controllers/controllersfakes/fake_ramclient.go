// Code generated by counterfeiter. DO NOT EDIT.
package controllersfakes

import (
	"context"
	"sync"

	"github.com/giantswarm/aws-network-topology-operator/controllers"
	"github.com/giantswarm/aws-network-topology-operator/pkg/aws"
)

type FakeRAMClient struct {
	ApplyResourceShareStub        func(context.Context, aws.ResourceShare) error
	applyResourceShareMutex       sync.RWMutex
	applyResourceShareArgsForCall []struct {
		arg1 context.Context
		arg2 aws.ResourceShare
	}
	applyResourceShareReturns struct {
		result1 error
	}
	applyResourceShareReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteResourceShareStub        func(context.Context, string) error
	deleteResourceShareMutex       sync.RWMutex
	deleteResourceShareArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	deleteResourceShareReturns struct {
		result1 error
	}
	deleteResourceShareReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRAMClient) ApplyResourceShare(arg1 context.Context, arg2 aws.ResourceShare) error {
	fake.applyResourceShareMutex.Lock()
	ret, specificReturn := fake.applyResourceShareReturnsOnCall[len(fake.applyResourceShareArgsForCall)]
	fake.applyResourceShareArgsForCall = append(fake.applyResourceShareArgsForCall, struct {
		arg1 context.Context
		arg2 aws.ResourceShare
	}{arg1, arg2})
	stub := fake.ApplyResourceShareStub
	fakeReturns := fake.applyResourceShareReturns
	fake.recordInvocation("ApplyResourceShare", []interface{}{arg1, arg2})
	fake.applyResourceShareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRAMClient) ApplyResourceShareCallCount() int {
	fake.applyResourceShareMutex.RLock()
	defer fake.applyResourceShareMutex.RUnlock()
	return len(fake.applyResourceShareArgsForCall)
}

func (fake *FakeRAMClient) ApplyResourceShareCalls(stub func(context.Context, aws.ResourceShare) error) {
	fake.applyResourceShareMutex.Lock()
	defer fake.applyResourceShareMutex.Unlock()
	fake.ApplyResourceShareStub = stub
}

func (fake *FakeRAMClient) ApplyResourceShareArgsForCall(i int) (context.Context, aws.ResourceShare) {
	fake.applyResourceShareMutex.RLock()
	defer fake.applyResourceShareMutex.RUnlock()
	argsForCall := fake.applyResourceShareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRAMClient) ApplyResourceShareReturns(result1 error) {
	fake.applyResourceShareMutex.Lock()
	defer fake.applyResourceShareMutex.Unlock()
	fake.ApplyResourceShareStub = nil
	fake.applyResourceShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRAMClient) ApplyResourceShareReturnsOnCall(i int, result1 error) {
	fake.applyResourceShareMutex.Lock()
	defer fake.applyResourceShareMutex.Unlock()
	fake.ApplyResourceShareStub = nil
	if fake.applyResourceShareReturnsOnCall == nil {
		fake.applyResourceShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyResourceShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRAMClient) DeleteResourceShare(arg1 context.Context, arg2 string) error {
	fake.deleteResourceShareMutex.Lock()
	ret, specificReturn := fake.deleteResourceShareReturnsOnCall[len(fake.deleteResourceShareArgsForCall)]
	fake.deleteResourceShareArgsForCall = append(fake.deleteResourceShareArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteResourceShareStub
	fakeReturns := fake.deleteResourceShareReturns
	fake.recordInvocation("DeleteResourceShare", []interface{}{arg1, arg2})
	fake.deleteResourceShareMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeRAMClient) DeleteResourceShareCallCount() int {
	fake.deleteResourceShareMutex.RLock()
	defer fake.deleteResourceShareMutex.RUnlock()
	return len(fake.deleteResourceShareArgsForCall)
}

func (fake *FakeRAMClient) DeleteResourceShareCalls(stub func(context.Context, string) error) {
	fake.deleteResourceShareMutex.Lock()
	defer fake.deleteResourceShareMutex.Unlock()
	fake.DeleteResourceShareStub = stub
}

func (fake *FakeRAMClient) DeleteResourceShareArgsForCall(i int) (context.Context, string) {
	fake.deleteResourceShareMutex.RLock()
	defer fake.deleteResourceShareMutex.RUnlock()
	argsForCall := fake.deleteResourceShareArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeRAMClient) DeleteResourceShareReturns(result1 error) {
	fake.deleteResourceShareMutex.Lock()
	defer fake.deleteResourceShareMutex.Unlock()
	fake.DeleteResourceShareStub = nil
	fake.deleteResourceShareReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeRAMClient) DeleteResourceShareReturnsOnCall(i int, result1 error) {
	fake.deleteResourceShareMutex.Lock()
	defer fake.deleteResourceShareMutex.Unlock()
	fake.DeleteResourceShareStub = nil
	if fake.deleteResourceShareReturnsOnCall == nil {
		fake.deleteResourceShareReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteResourceShareReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeRAMClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyResourceShareMutex.RLock()
	defer fake.applyResourceShareMutex.RUnlock()
	fake.deleteResourceShareMutex.RLock()
	defer fake.deleteResourceShareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRAMClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ controllers.RAMClient = new(FakeRAMClient)
